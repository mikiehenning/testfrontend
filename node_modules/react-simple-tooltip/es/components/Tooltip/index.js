var _templateObject = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  ", ";\n"], ["\n  position: absolute;\n  ", ";\n"]),
    _templateObject2 = _taggedTemplateLiteralLoose(["\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  ", ";\n"], ["\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  ", ";\n"]),
    _templateObject3 = _taggedTemplateLiteralLoose(["\n  top: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  ", ";\n"], ["\n  top: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  ", ";\n"]),
    _templateObject4 = _taggedTemplateLiteralLoose(["\n  right: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  ", ";\n"], ["\n  right: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  ", ";\n"]),
    _templateObject5 = _taggedTemplateLiteralLoose(["\n  left: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  ", ";\n"], ["\n  left: 100%;\n  top: 50%;\n  transform: translateY(-50%);\n  ", ";\n"]);

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

import React from "react";
import PropTypes from "prop-types";
import styled from "styled-components";

var Base = styled.div(_templateObject, function (props) {
  return props.zIndex && "z-index: " + props.zIndex + ";";
});

var Top = Base.extend(_templateObject2, function (props) {
  return props.offset && "margin-bottom: " + props.offset + "px;";
});

var Bottom = Base.extend(_templateObject3, function (props) {
  return props.offset && "margin-top: " + props.offset + "px;";
});

var Left = Base.extend(_templateObject4, function (props) {
  return props.offset && "margin-right: " + props.offset + "px;";
});

var Right = Base.extend(_templateObject5, function (props) {
  return props.offset && "margin-left: " + props.offset + "px;";
});

var tooltips = {
  left: Left,
  top: Top,
  right: Right,
  bottom: Bottom
};

var Tooltip = function Tooltip(_ref) {
  var children = _ref.children,
      open = _ref.open,
      zIndex = _ref.zIndex,
      placement = _ref.placement,
      offset = _ref.offset;

  var Component = tooltips[placement] || tooltips.top;
  return open && React.createElement(
    Component,
    { open: open, zIndex: zIndex, offset: offset },
    children
  );
};

Tooltip.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.any.isRequired,
  open: PropTypes.bool,
  zIndex: PropTypes.number,
  placement: PropTypes.string,
  offset: PropTypes.number
} : {};

export default Tooltip;